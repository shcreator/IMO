//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Chat {
  id               String            @id() @default(uuid())
  type             String?
  creatorUserId    String
  creatorUser      User?             @relation(fields: [creatorUserId], references: [id], name: "creatorUser")
  chatParticipants ChatParticipant[] @relation("chat")
  messages         Message[]         @relation("chat")
  dateCreated      DateTime          @default(now())
  dateUpdated      DateTime          @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ChatParticipant {
  id          String   @id() @default(uuid())
  role        String?
  chatId      String
  chat        Chat?    @relation(fields: [chatId], references: [id], name: "chat")
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id                  String               @id() @default(uuid())
  content             String?
  messageType         String?
  mediaUrl            String?
  chatId              String
  chat                Chat?                @relation(fields: [chatId], references: [id], name: "chat")
  senderUserId        String
  senderUser          User?                @relation(fields: [senderUserId], references: [id], name: "senderUser")
  messageReadReceipts MessageReadReceipt[] @relation("message")
  dateCreated         DateTime             @default(now())
  dateUpdated         DateTime             @default(now()) @updatedAt()
}

/// @@allow('all', true)
model MessageReadReceipt {
  id            String   @id() @default(uuid())
  readTimestamp String?
  messageId     String
  message       Message? @relation(fields: [messageId], references: [id], name: "message")
  userId        String
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated   DateTime @default(now())
  dateUpdated   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Call {
  id           String   @id() @default(uuid())
  callType     String?
  startTime    String?
  endTime      String?
  callStatus   String?
  callerUserId String
  callerUser   User?    @relation(fields: [callerUserId], references: [id], name: "callerUser")
  calleeUserId String
  calleeUser   User?    @relation(fields: [calleeUserId], references: [id], name: "calleeUser")
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Contact {
  id            String   @id() @default(uuid())
  userId        String
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  contactUserId String
  contactUser   User?    @relation(fields: [contactUserId], references: [id], name: "contactUser")
  dateCreated   DateTime @default(now())
  dateUpdated   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ContactRequest {
  id          String   @id() @default(uuid())
  status      String?
  fromUserId  String
  fromUser    User?    @relation(fields: [fromUserId], references: [id], name: "fromUser")
  toUserId    String
  toUser      User?    @relation(fields: [toUserId], references: [id], name: "toUser")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserSetting {
  id           String   @id() @default(uuid())
  settingName  String?
  settingValue String?
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                        String               @id() @default(uuid())
  name                      String?
  email                     String?              @unique()
  pictureUrl                String?              @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation           String?
  emailVerified             Boolean?
  status                    UserStatus           @default(VERIFIED)
  globalRole                String               @default("USER")
  /// @password
  /// @omit
  password                  String?
  dateCreated               DateTime             @default(now())
  dateUpdated               DateTime             @default(now()) @updatedAt()
  accounts                  Account[]
  sessions                  Session[]
  pushNotifications         PushNotification[]   @relation("user")
  chatsAsCreatorUser        Chat[]               @relation("creatorUser")
  chatParticipants          ChatParticipant[]    @relation("user")
  messagesAsSenderUser      Message[]            @relation("senderUser")
  messageReadReceipts       MessageReadReceipt[] @relation("user")
  callsAsCallerUser         Call[]               @relation("callerUser")
  callsAsCalleeUser         Call[]               @relation("calleeUser")
  contacts                  Contact[]            @relation("user")
  contactsAsContactUser     Contact[]            @relation("contactUser")
  contactRequestsAsFromUser ContactRequest[]     @relation("fromUser")
  contactRequestsAsToUser   ContactRequest[]     @relation("toUser")
  userSettings              UserSetting[]        @relation("user")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
